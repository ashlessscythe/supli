// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  role          Role      @default(STAFF)
  accounts      Account[]
  sessions      Session[]
  requests      Request[]
  auditLogs     AuditLog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Supply {
  id               String    @id @default(cuid())
  name             String    @unique
  description      String
  quantity         Int       @default(0)
  minimumThreshold Int       @default(0)
  requests         Request[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Request {
  id        String        @id @default(cuid())
  userId    String
  supplyId  String
  quantity  Int
  status    RequestStatus @default(PENDING)
  user      User         @relation(fields: [userId], references: [id])
  supply    Supply       @relation(fields: [supplyId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  STAFF
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}
